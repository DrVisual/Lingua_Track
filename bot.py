import os
import asyncio
import re
from datetime import time, timedelta

import django
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from asgiref.sync import sync_to_async
from django.conf import settings
from django.utils import timezone
from django.utils.timezone import localtime
from dotenv import load_dotenv
from gtts import gTTS
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π (–ø–æ—Å–ª–µ django.setup())
from django.contrib.auth.models import User
from cards.models import Card, Schedule, UserStats


# --- –ö–õ–ê–í–ò–ê–¢–£–†–ê ---
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/today"), KeyboardButton(text="/test")],
            [KeyboardButton(text="/progress"), KeyboardButton(text="/cards")],
            [KeyboardButton(text="/help")]
        ],
        resize_keyboard=True
    )


# --- –û–°–ù–û–í–ù–´–ï –ö–û–ú–ú–ê–ù–î–´ ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    try:
        user_stats = await sync_to_async(UserStats.objects.get)(telegram_id=user_id)
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –Ø —Ç–µ–±—è –ø–æ–º–Ω—é üòä")
    except UserStats.DoesNotExist:
        try:
            user = await sync_to_async(User.objects.first)()
            if not user:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            user_stats, created = await sync_to_async(UserStats.objects.get_or_create)(
                user=user,
                defaults={'telegram_id': user_id}
            )
            if not created:
                user_stats.telegram_id = user_id
                await sync_to_async(user_stats.save)()

            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
                "–Ø —Å–≤—è–∑–∞–ª —Ç–µ–±—è —Å —Ç–≤–æ–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –≤ LinguaTrack.\n"
                "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É—á–∏—Ç—å —Å–ª–æ–≤–∞ –≤ –±–æ—Ç–µ!"
            )
        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            print(e)

    await message.answer(
        "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard()
    )


@dp.message(Command("today"))
async def cmd_today(message: types.Message):
    user_id = message.from_user.id

    try:
        user_stats = await sync_to_async(
            UserStats.objects.select_related('user').get
        )(telegram_id=user_id)
        user = user_stats.user

        due_cards = await sync_to_async(list)(
            Card.objects.filter(
                owner=user,
                schedule__next_review__lte=timezone.now()
            )
        )

        if due_cards:
            response = "–°–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            for card in due_cards:
                response += f"üìå *{card.word}* ‚Üí {card.translation}\n"
            await message.answer(response, parse_mode="Markdown")
        else:
            await message.answer("üéâ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!")
    except UserStats.DoesNotExist:
        await message.answer("–¢—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –ù–∞–ø–∏—à–∏ /start")


@dp.message(Command("progress"))
async def cmd_progress(message: types.Message):
    user_id = message.from_user.id

    try:
        user_stats = await sync_to_async(
            UserStats.objects.select_related('user').get
        )(telegram_id=user_id)
        user = user_stats.user

        total = await sync_to_async(Card.objects.filter(owner=user).count)()
        learned = await sync_to_async(
            Card.objects.filter(owner=user, schedule__repetitions__gte=3).count
        )()

        await message.answer(
            f"üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
            f"–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total}\n"
            f"–í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: {learned}\n"
            f"–°–µ—Ä–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {user_stats.review_streak}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {user_stats.last_reviewed.strftime('%d.%m.%Y') if user_stats.last_reviewed else '‚Äî'}"
        )
    except UserStats.DoesNotExist:
        await message.answer("–¢—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –ù–∞–ø–∏—à–∏ /start")


@dp.message(Command("cards"))
async def cmd_cards(message: types.Message):
    user_id = message.from_user.id

    try:
        user_stats = await sync_to_async(
            UserStats.objects.select_related('user').get
        )(telegram_id=user_id)
        user = user_stats.user

        cards = await sync_to_async(list)(Card.objects.filter(owner=user)[:10])

        if cards:
            response = "–¢–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–µ—Ä–≤—ã–µ 10):\n\n"
            for card in cards:
                response += f"‚Ä¢ *{card.word}* ‚Üí {card.translation}\n"
            await message.answer(response, parse_mode="Markdown")
        else:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫. –î–æ–±–∞–≤—å –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏!")
    except UserStats.DoesNotExist:
        await message.answer("–¢—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –ù–∞–ø–∏—à–∏ /start")


@dp.message(Command("say"))
async def cmd_say(message: types.Message):
    text = message.text.split(' ', 1)
    if len(text) < 2:
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /say hello")
        return

    word = text[1].strip()
    if not word:
        await message.answer("–°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    os.makedirs("temp", exist_ok=True)
    audio_path = f"temp/{word}.mp3"

    try:
        tts = gTTS(text=word, lang='en')
        tts.save(audio_path)
        voice = FSInputFile(audio_path)
        await message.answer_voice(voice, caption=f"üîä *{word}*", parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ: {e}")
        print(e)
    finally:
        if os.path.exists(audio_path):
            os.remove(audio_path)


# --- –¢–ï–°–¢ –° –í–´–ë–û–†–û–ú ---

@dp.message(Command("test"))
async def cmd_test(message: types.Message):
    user_id = message.from_user.id
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = await sync_to_async(UserStats.objects.get)(telegram_id=user_id)
        user = user_stats.user

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        cards = await sync_to_async(list)(Card.objects.filter(owner=user))
        if len(cards) < 4:
            await message.answer("–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 4 —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.")
            return

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        random.shuffle(cards)
        card = cards[0]
        options = [card.translation] + [c.translation for c in cards[1:4]]
        random.shuffle(options)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if not hasattr(bot, 'test_data'):
            bot.test_data = {}
        bot.test_data[user_id] = card.translation

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=options[0])],
                [KeyboardButton(text=options[1])],
                [KeyboardButton(text=options[2])],
                [KeyboardButton(text=options[3])],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            f"üéØ –¢–µ—Å—Ç: —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª–æ–≤–æ *{card.word}*?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞.")
        print(e)


@dp.message(lambda m: hasattr(bot, 'test_data') and m.from_user.id in bot.test_data)
async def handle_test_answer(message: types.Message):
    user_id = message.from_user.id
    correct = bot.test_data[user_id]

    if message.text == correct:
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!", reply_markup=get_main_keyboard())
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{correct}*", parse_mode="Markdown", reply_markup=get_main_keyboard())

    del bot.test_data[user_id]


# --- –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –°–õ–û–í –ò –ü–ï–†–ï–í–û–î–û–í ---

@dp.message(Command("match"))
async def cmd_match(message: types.Message):
    user_id = message.from_user.id
    try:
        user_stats = await sync_to_async(UserStats.objects.get)(telegram_id=user_id)
        user = user_stats.user

        cards = await sync_to_async(list)(Card.objects.filter(owner=user))
        if len(cards) < 2:
            await message.answer("–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å.")
            return

        random.shuffle(cards)
        sample = cards[:4]

        words = [c.word for c in sample]
        translations = [c.translation for c in sample]
        random.shuffle(translations)

        if not hasattr(bot, 'match_data'):
            bot.match_data = {}
        bot.match_data[user_id] = {c.word: c.translation for c in sample}

        options = translations[:]
        random.shuffle(options)

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=f"{words[0]} ‚Üí {options[0]}")],
                [KeyboardButton(text=f"{words[0]} ‚Üí {options[1]}")],
                [KeyboardButton(text=f"{words[0]} ‚Üí {options[2]}")],
                [KeyboardButton(text=f"{words[0]} ‚Üí {options[3]}")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            f"üß† –°–æ–ø–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º:\n\n"
            f"–°–ª–æ–≤–æ: *{words[0]}*\n"
            f"–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã.")
        print(e)


@dp.message(lambda m: '‚Üí' in m.text and m.text.count('‚Üí') == 1)
async def handle_match_answer(message: types.Message):
    user_id = message.from_user.id
    if not hasattr(bot, 'match_data') or user_id not in bot.match_data:
        return

    try:
        word, given_translation = [part.strip() for part in message.text.split('‚Üí')]
    except:
        return

    correct_translation = bot.match_data[user_id].get(word)
    if not correct_translation:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç.")
        return

    if given_translation == correct_translation:
        result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        result = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: *{correct_translation}*"

    await message.answer(result, reply_markup=get_main_keyboard(), parse_mode="Markdown")
    del bot.match_data[user_id]


# --- –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ---

@dp.message(Command("remind_at"))
async def cmd_remind_at(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    match = re.search(r'(\d{1,2})[:\s](\d{2})', text)
    if not match:
        await message.answer(
            "–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "  /remind_at 20:30\n"
            "  /remind_at 9:00"
        )
        return

    try:
        hour = int(match.group(1))
        minute = int(match.group(2))

        if hour < 0 or hour > 23 or minute < 0 or minute > 59:
            await message.answer("–í—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –£–∫–∞–∂–∏ –æ—Ç 00:00 –¥–æ 23:59.")
            return

        user_time = time(hour=hour, minute=minute)

        try:
            user_stats = await sync_to_async(UserStats.objects.get)(telegram_id=user_id)
            user_stats.reminder_time = user_time
            await sync_to_async(user_stats.save)()

            await message.answer(
                f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {user_time.strftime('%H:%M')}\n"
                "–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞!"
            )
        except UserStats.DoesNotExist:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start")
    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        print(e)


async def send_daily_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        now = timezone.now()
        local_now = localtime(now)
        current_time = time(local_now.hour, local_now.minute)

        user_stats_list = await sync_to_async(list)(
            UserStats.objects.select_related('user')
            .exclude(telegram_id__isnull=True)
            .filter(reminder_time=current_time)
        )

        for user_stats in user_stats_list:
            user = user_stats.user
            due_count = await sync_to_async(
                Card.objects.filter(
                    owner=user,
                    schedule__next_review__lte=now
                ).count
            )()

            if due_count > 0:
                try:
                    await bot.send_message(
                        chat_id=user_stats.telegram_id,
                        text=(
                            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                            f"–£ —Ç–µ–±—è **{due_count} —Å–ª–æ–≤(–∞)** –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ.\n"
                            f"–ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å ‚Äî –∏–Ω–∞—á–µ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—Å–∏—Ç—Å—è!\n\n"
                            f"üëâ /today ‚Äî –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"
                        ),
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_stats.telegram_id}: {e}")

    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –≤ send_daily_reminders: {e}")


# --- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ ---

@dp.message(Command("reschedule"))
async def cmd_reschedule(message: types.Message):
    text = message.text.split()
    if len(text) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /reschedule <—Å–ª–æ–≤–æ> —á–µ—Ä–µ–∑ <N> –¥–Ω–µ–π")
        return

    word = text[1]
    try:
        days = int(text[3])
    except (ValueError, IndexError):
        await message.answer("–£–∫–∞–∂–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ '—á–µ—Ä–µ–∑'")
        return

    user_id = message.from_user.id
    try:
        user_stats = await sync_to_async(UserStats.objects.get)(telegram_id=user_id)
        user = user_stats.user
        card = await sync_to_async(Card.objects.get)(owner=user, word__iexact=word)
        schedule = card.schedule
        schedule.next_review = timezone.now() + timedelta(days=days)
        await sync_to_async(schedule.save)()
        await message.answer(f"‚úÖ –°–ª–æ–≤–æ *{word}* –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π.", parse_mode="Markdown")
    except Card.DoesNotExist:
        await message.answer("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ.")
        print(e)


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "  /start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "  /today ‚Äî —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "  /test ‚Äî –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n"
        "  /match ‚Äî —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤\n"
        "  /progress ‚Äî –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "  /say <—Å–ª–æ–≤–æ> ‚Äî –æ–∑–≤—É—á–∏—Ç—å\n"
        "  /cards ‚Äî —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        "  /remind_at –ß–ß:–ú–ú ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "  /reschedule <—Å–ª–æ–≤–æ> —á–µ—Ä–µ–∑ N –¥–Ω–µ–π ‚Äî –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ\n"
        "  /help ‚Äî —ç—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞"
    )


@dp.message(Command("debug_time"))
async def cmd_debug_time(message: types.Message):
    now = timezone.now()
    local_now = localtime(now)
    await message.answer(
        f"üåç UTC: {now.strftime('%H:%M:%S')}\n"
        f"‚è∞ Local: {local_now.strftime('%H:%M:%S')}\n"
        f"‚öôÔ∏è TIME_ZONE: {settings.TIME_ZONE}"
    )


@dp.message(Command("debug_user"))
async def cmd_debug_user(message: types.Message):
    user_id = message.from_user.id
    try:
        user_stats = await sync_to_async(UserStats.objects.get)(telegram_id=user_id)
        reminder_time = user_stats.reminder_time
        now = timezone.now()
        local_now = localtime(now)
        current_time = time(local_now.hour, local_now.minute)

        await message.answer(
            f"üì± –¢–≤–æ–π Telegram ID: {user_id}\n"
            f"üîî –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_time}\n"
            f"üïí –¢–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {current_time}\n"
            f"üìÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç? {reminder_time == current_time}"
        )
    except UserStats.DoesNotExist:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ù–∞–ø–∏—à–∏ /start")


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

async def main():
    print("üöÄ –ë–æ—Ç –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω—ã")

    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_daily_reminders, 'cron', minute='*')  # –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    scheduler.start()

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())