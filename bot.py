import os
import asyncio
from datetime import timedelta, time

# --- –†–∞–∑—Ä–µ—à–∞–µ–º unsafe-–¥–æ—Å—Ç—É–ø –∫ Django ORM (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞!) ---
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"

import django
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from django.conf import settings
from django.utils import timezone
from dotenv import load_dotenv
from gtts import gTTS

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ event loop –¥–ª—è Windows ---
try:
    from asyncio import WindowsSelectorEventLoopPolicy
    asyncio.set_event_loop_policy(WindowsSelectorEventLoopPolicy())
except Exception:
    pass

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django ---
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ ---
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ django.setup() ---
from django.contrib.auth.models import User
from cards.models import Card, Schedule, UserStats


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/today"), KeyboardButton(text="/test")],
            [KeyboardButton(text="/match"), KeyboardButton(text="/review")],
            [KeyboardButton(text="/progress"), KeyboardButton(text="/cards")],
            [KeyboardButton(text="/help")]
        ],
        resize_keyboard=True
    )


# --- /start ‚Äî —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º /help ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    try:
        user_stats = UserStats.objects.get(telegram_id=user_id)
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –Ø —Ç–µ–±—è –ø–æ–º–Ω—é üòä", reply_markup=get_main_keyboard())
        await cmd_help(message)
    except UserStats.DoesNotExist:
        try:
            user = User.objects.first()
            if not user:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            user_stats, created = UserStats.objects.get_or_create(
                user=user,
                defaults={'telegram_id': user_id}
            )
            if not created:
                user_stats.telegram_id = user_id
                user_stats.save()

            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
                "–Ø —Å–≤—è–∑–∞–ª —Ç–µ–±—è —Å —Ç–≤–æ–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –≤ LinguaTrack.\n"
                "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É—á–∏—Ç—å —Å–ª–æ–≤–∞ –≤ –±–æ—Ç–µ!",
                reply_markup=get_main_keyboard()
            )
            await cmd_help(message)
        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ.")
            print(e)


# --- /help ---
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "  /today ‚Äî —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "  /test ‚Äî –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n"
        "  /match ‚Äî –∏–≥—Ä–∞ \"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ\"\n"
        "  /review ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞\n"
        "  /progress ‚Äî –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "  /cards ‚Äî –º–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏\n"
        "  /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "  /edit ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "  /delete ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "  /say <—Å–ª–æ–≤–æ> ‚Äî –æ–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ\n"
        "  /set_reminder ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "  /help ‚Äî —ç—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞"
    )


# --- /today ‚Äî —Å–ª–æ–≤–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ ---
@dp.message(Command("today"))
async def cmd_today(message: types.Message):
    user_id = message.from_user.id
    try:
        user_stats = UserStats.objects.select_related('user').get(telegram_id=user_id)
        user = user_stats.user

        due_cards = list(
            Card.objects.filter(
                owner=user,
                schedule__next_review__lte=timezone.now()
            )
        )

        if due_cards:
            response = "–°–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            for card in due_cards:
                response += f"üìå *{card.word}* ‚Üí {card.translation}\n"
            await message.answer(response, parse_mode="Markdown")
        else:
            await message.answer("üéâ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤.")
        print(f"–û—à–∏–±–∫–∞ /today: {e}")


# --- /progress ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@dp.message(Command("progress"))
async def cmd_progress(message: types.Message):
    user_id = message.from_user.id
    try:
        user_stats = UserStats.objects.select_related('user').get(telegram_id=user_id)
        user = user_stats.user

        total = Card.objects.filter(owner=user).count()
        learned = Card.objects.filter(owner=user, schedule__repetitions__gte=3).count()

        await message.answer(
            f"üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
            f"–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total}\n"
            f"–í—ã—É—á–µ–Ω–æ —Å–ª–æ–≤: {learned}\n"
            f"–°–µ—Ä–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {user_stats.review_streak}"
        )
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        print(f"–û—à–∏–±–∫–∞ /progress: {e}")


# --- /cards ‚Äî —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ ---
@dp.message(Command("cards"))
async def cmd_cards(message: types.Message):
    user_id = message.from_user.id
    try:
        user_stats = UserStats.objects.select_related('user').get(telegram_id=user_id)
        user = user_stats.user

        cards = list(Card.objects.filter(owner=user)[:10])

        if cards:
            response = "–¢–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–µ—Ä–≤—ã–µ 10):\n\n"
            for card in cards:
                response += f"‚Ä¢ *{card.word}* ‚Üí {card.translation}\n"
            await message.answer(response, parse_mode="Markdown")
        else:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫.")
        print(f"–û—à–∏–±–∫–∞ /cards: {e}")


# --- /say ‚Äî –æ–∑–≤—É—á–∫–∞ —Å–ª–æ–≤–∞ ---
@dp.message(Command("say"))
async def cmd_say(message: types.Message):
    text = message.text.split(' ', 1)
    if len(text) < 2:
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /say hello")
        return

    word = text[1].strip()
    if not word:
        await message.answer("–°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    os.makedirs("temp", exist_ok=True)
    audio_path = f"temp/{word}.mp3"

    try:
        tts = gTTS(text=word, lang='en')
        tts.save(audio_path)
        voice = FSInputFile(audio_path)
        await message.answer_voice(voice, caption=f"üîä *{word}*", parse_mode="Markdown")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ: {e}")
    finally:
        if os.path.exists(audio_path):
            os.remove(audio_path)


# --- –†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ ---
@dp.message(Command("add"))
async def cmd_add(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å: `—Å–ª–æ–≤–æ | –ø–µ—Ä–µ–≤–æ–¥ | –ø—Ä–∏–º–µ—Ä | –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ | —É—Ä–æ–≤–µ–Ω—å`")
    if not hasattr(bot, 'waiting_for'):
        bot.waiting_for = {}
    bot.waiting_for[message.from_user.id] = 'add_card'


@dp.message(Command("edit"))
async def cmd_edit(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å.")
    if not hasattr(bot, 'waiting_for'):
        bot.waiting_for = {}
    bot.waiting_for[message.from_user.id] = 'edit_word'


@dp.message(Command("delete"))
async def cmd_delete(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.")
    if not hasattr(bot, 'waiting_for'):
        bot.waiting_for = {}
    bot.waiting_for[message.from_user.id] = 'delete_word'


# --- /test ‚Äî —Ç–µ—Å—Ç —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ ---
@dp.message(Command("test"))
async def cmd_test(message: types.Message):
    user_id = message.from_user.id
    try:
        user_stats = UserStats.objects.get(telegram_id=user_id)
        user = user_stats.user

        cards = list(Card.objects.filter(owner=user))
        if len(cards) < 4:
            await message.answer("–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 4 —Å–ª–æ–≤–∞.")
            return

        import random
        random.shuffle(cards)
        card = cards[0]
        options = [card.translation] + [c.translation for c in random.sample(cards[1:], 3)]
        random.shuffle(options)

        if not hasattr(bot, 'test_data'):
            bot.test_data = {}
        bot.test_data[user_id] = card.translation

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=opt)] for opt in options],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            f"üéØ –¢–µ—Å—Ç: —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç *{card.word}*?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞.")
        print(f"–û—à–∏–±–∫–∞ /test: {e}")


# --- –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç ---
@dp.message(lambda m: hasattr(bot, 'test_data') and m.from_user.id in bot.test_data)
async def handle_test_answer(message: types.Message):
    user_id = message.from_user.id
    correct = bot.test_data[user_id]

    if message.text == correct:
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=get_main_keyboard())
    else:
        await message.answer(f"‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–æ: *{correct}*", parse_mode="Markdown", reply_markup=get_main_keyboard())

    del bot.test_data[user_id]


# --- /match ‚Äî –∏–≥—Ä–∞ ---
@dp.message(Command("match"))
async def cmd_match(message: types.Message):
    user_id = message.from_user.id
    try:
        user_stats = UserStats.objects.get(telegram_id=user_id)
        user = user_stats.user

        cards = list(Card.objects.filter(owner=user))
        if len(cards) < 2:
            await message.answer("–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞.")
            return

        import random
        random.shuffle(cards)
        sample = cards[:4]

        words = [c.word for c in sample]
        translations = [c.translation for c in sample]
        random.shuffle(translations)

        if not hasattr(bot, 'match_data'):
            bot.match_data = {}
        bot.match_data[user_id] = {c.word: c.translation for c in sample}

        options = translations[:]
        random.shuffle(options)

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=f"{words[0]} ‚Üí {opt}")] for opt in options],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            f"üß† –°–æ–ø–æ—Å—Ç–∞–≤—å: *{words[0]}*",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã.")
        print(f"–û—à–∏–±–∫–∞ /match: {e}")


# --- –û—Ç–≤–µ—Ç –Ω–∞ –∏–≥—Ä—É ---
@dp.message(lambda m: '‚Üí' in m.text and m.text.count('‚Üí') == 1)
async def handle_match_answer(message: types.Message):
    user_id = message.from_user.id
    if not hasattr(bot, 'match_data') or user_id not in bot.match_data:
        return

    try:
        word, given = [part.strip() for part in message.text.split('‚Üí')]
    except:
        return

    correct = bot.match_data[user_id].get(word)
    if not correct:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if given == correct else f"‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–æ: *{correct}*"
    await message.answer(result, reply_markup=get_main_keyboard(), parse_mode="Markdown")
    del bot.match_data[user_id]


# --- /review ‚Äî –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ ---
@dp.message(Command("review"))
async def cmd_review(message: types.Message):
    user_id = message.from_user.id
    try:
        user_stats = UserStats.objects.get(telegram_id=user_id)
        user = user_stats.user

        due_cards = list(
            Card.objects.filter(
                owner=user,
                schedule__next_review__lte=timezone.now()
            )
        )

        if not due_cards:
            await message.answer("üéâ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!")
            return

        card = due_cards[0]
        if not hasattr(bot, 'review_data'):
            bot.review_data = {}
        bot.review_data[user_id] = {'card_id': card.id, 'word': card.word}

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üî¥ –ó–∞–±—ã–ª")],
                [KeyboardButton(text="üü° –°–ª–æ–∂–Ω–æ")],
                [KeyboardButton(text="üü¢ –õ–µ–≥–∫–æ")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await message.answer(
            f"üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:\n\n**{card.word}**?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤.")
        print(f"–û—à–∏–±–∫–∞ /review: {e}")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ ---
@dp.message(lambda m: m.text in ["üî¥ –ó–∞–±—ã–ª", "üü° –°–ª–æ–∂–Ω–æ", "üü¢ –õ–µ–≥–∫–æ"])
async def handle_review_answer(message: types.Message):
    user_id = message.from_user.id
    if not hasattr(bot, 'review_data') or user_id not in bot.review_data:
        return

    data = bot.review_data[user_id]
    try:
        card = Card.objects.get(id=data['card_id'])
        schedule = card.schedule

        difficulty = 'hard' if message.text == "üî¥ –ó–∞–±—ã–ª" \
            else 'good' if message.text == "üü° –°–ª–æ–∂–Ω–æ" else 'easy'

        # –ü—Ä—è–º–æ –≤—ã–∑—ã–≤–∞–µ–º ‚Äî –±–µ–∑ sync_to_async
        schedule.update_schedule(difficulty)
        schedule.save()

        user_stats = UserStats.objects.get(telegram_id=user_id)
        user_stats.review_streak += 1
        user_stats.last_reviewed = timezone.now()
        user_stats.save()

        del bot.review_data[user_id]
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_review_answer: {e}")


# --- /set_reminder ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
@dp.message(Command("set_reminder"))
async def cmd_set_reminder(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `09:00`).")
    if not hasattr(bot, 'waiting_for'):
        bot.waiting_for = {}
    bot.waiting_for[message.from_user.id] = 'set_reminder_time'


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ ---
@dp.message()
async def handle_reminder_time(message: types.Message):
    if not hasattr(bot, 'waiting_for') or message.from_user.id not in bot.waiting_for:
        return

    if bot.waiting_for[message.from_user.id] != 'set_reminder_time':
        return

    try:
        time_str = message.text.strip()
        hours, minutes = map(int, time_str.split(':'))
        reminder_time = time(hour=hours, minute=minutes)

        user_stats = UserStats.objects.get(telegram_id=message.from_user.id)
        user_stats.reminder_time = reminder_time
        user_stats.save()

        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {time_str}.")
        del bot.waiting_for[message.from_user.id]
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π `–ß–ß:–ú–ú`.")


# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@dp.message()
async def log_user(message: types.Message):
    if not hasattr(bot, 'active_users'):
        bot.active_users = set()
    bot.active_users.add(message.from_user.id)


# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_local_reminders():
    if not hasattr(bot, 'active_users') or not bot.active_users:
        return

    now = timezone.now().time()
    for user_id in list(bot.active_users):
        try:
            user_stats = UserStats.objects.get(telegram_id=user_id)
            if user_stats.reminder_time:
                if (user_stats.reminder_time.hour == now.hour and
                        abs(user_stats.reminder_time.minute - now.minute) < 2):
                    await bot.send_message(
                        chat_id=user_id,
                        text="üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!* ‚è∞\n"
                             "–ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞ —Å–µ–≥–æ–¥–Ω—è!\n\n"
                             "üìå /today ‚Äî –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ",
                        parse_mode="Markdown"
                    )
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {user_id}: {e}")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_local_reminders, 'interval', minutes=1)
    scheduler.start()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())